# Generated by Django 3.0 on 2025-08-15 09:20

from django.db import migrations


def transfer_lettings_data(apps, schema_editor):
    OldAddress = apps.get_model("oc_lettings_site", "Address")
    NewAddress = apps.get_model("lettings", "Address")
    OldLetting = apps.get_model("oc_lettings_site", "Letting")
    NewLetting = apps.get_model("lettings", "Letting")

    address_id_mapping = {}

    # Transférer les adresses
    for old_address in OldAddress.objects.all():
        new_address = NewAddress.objects.create(
            number=old_address.number,
            street=old_address.street,
            city=old_address.city,
            state=old_address.state,
            zip_code=old_address.zip_code,
            country_iso_code=old_address.country_iso_code,
        )
        # Enregistrer la correspondance d'ID
        address_id_mapping[old_address.id] = new_address.id

    # Transférer les lettings et leurs relations
    for old_letting in OldLetting.objects.all():

        # Récupérer le nouvel ID d'adresse à partir du dictionnaire
        new_address_id = address_id_mapping.get(old_letting.address_id)

        # Vérifier si l'adresse correspondante a été trouvée
        if new_address_id:
            # Créer le nouvel objet Letting avec le nouvel ID d'adresse
            NewLetting.objects.create(
                title=old_letting.title, address_id=new_address_id
            )


def reverse_transfer_letting_data(apps, schema_editor):
    # Logique pour annuler la migration
    NewAddress = apps.get_model("lettings", "Address")
    NewLetting = apps.get_model("lettings", "Letting")

    # Supprimer les objets créés
    NewLetting.objects.all().delete()
    NewAddress.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("lettings", "0001_initial"),
        ("oc_lettings_site", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(transfer_lettings_data, reverse_transfer_letting_data),
    ]
